generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model BankChange {
  id        String           @id @default(cuid())
  type      TransactionTypes
  amount    Float
  userId    String
  bankName  BankName
  createdAt DateTime         @default(now())
  invoiceId String?
  after     Float            @default(0)
  before    Float            @default(0)
  user      User?            @relation(fields: [userId], references: [id])
  invoice   Invoice?         @relation(fields: [invoiceId], references: [id])

  @@index([userId])
  @@index([invoiceId])
}

model Bank {
  id       String @id @default(cuid())
  khadmaty Float  @default(0)
  bss      Float  @default(0)
}

model InvoiceStatus {
  id             String            @id @default(cuid())
  invoiceId      String            @unique
  note           String?
  acceptedAmount Int?              @default(0)
  status         InvoiceStatusEnum @default(Waiting)
  invoice        Invoice           @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
}

model InvoiceNote {
  id          String   @id @default(cuid())
  userId      String
  invoiceId   String
  noteContent String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  invoice     Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  madeBy      User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([invoiceId])
}

model Invoice {
  id            String         @id @default(cuid())
  userId        String
  customerId    String
  cost          Float
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  madeBy        User           @relation(fields: [userId], references: [id])
  customer      Customer       @relation(fields: [customerId], references: [id])
  invoiceStatus InvoiceStatus?
  invoiceNotes  InvoiceNote[]
  transaction   Transaction?
  bankChange    BankChange[]

  @@index([userId])
  @@index([customerId])
}

model CalculateCards {
  id     String @id @default(cuid())
  cost   Float  @unique
  values Json?

  @@index([cost])
}

model Cards {
  id    String @id @default(cuid())
  value Float  @unique

  @@index([value])
}

model CustomerNote {
  id          String    @id @default(cuid())
  customerId  String?
  userId      String
  noteContent String
  global      Boolean   @default(false)
  customer    Customer? @relation(fields: [customerId], references: [id], onDelete: Cascade)
  madeBy      User      @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([customerId])
}

model CustomerDebt {
  id          String           @id @default(cuid())
  customerId  String?
  amount      Int
  createdAt   DateTime         @default(now())
  deleted     Boolean          @default(false)
  type        TransactionTypes @default(Add)
  userId      String?
  note        String?
  updatedAt   DateTime         @default(now()) @updatedAt
  isImportant Boolean?         @default(true)
  deletedBy   User?            @relation(fields: [userId], references: [id])
  customer    Customer?        @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@index([deleted])
  @@index([userId])
  @@index([customerId])
}

model Customer {
  id            String         @id @default(cuid())
  name          String
  birthday      String?
  number        String         @unique
  mobile        String?
  idNumber      String?
  address       String?
  customerNotes CustomerNote[]
  invoices      Invoice[]
  customerDebt  CustomerDebt[]

  @@index([number, name])
}

model Transaction {
  id        String  @id @default(cuid())
  userId    String
  invoiceId String  @unique
  viewed    Boolean @default(false)
  user      User    @relation(fields: [userId], references: [id])
  invoice   Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model changeBalance {
  id            String           @id @default(cuid())
  adminId       String
  userId        String
  amount        Float
  type          TransactionTypes
  createdAt     DateTime         @default(now())
  admin         User?            @relation("admin", fields: [adminId], references: [id])
  user          User?            @relation("user", fields: [userId], references: [id])
  balanceBefore Float            @default(0)
  balanceAfter  Float            @default(0)

  @@index([userId])
  @@index([adminId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id                     String          @id @default(cuid())
  name                   String?
  email                  String?         @unique
  emailVerified          DateTime?
  image                  String?
  userBalance            Float           @default(0)
  role                   UserRole        @default(User)
  accounts               Account[]
  sessions               Session[]
  invoices               Invoice[]
  customerNotes          CustomerNote[]
  invoiceNotes           InvoiceNote[]
  transactions           Transaction[]
  changeBalanceFromAdmin changeBalance[] @relation("admin")
  changeBalanceForUser   changeBalance[] @relation("user")
  deletedCustomerDebt    CustomerDebt[]
  bankChange             BankChange[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model CalculateCardsToCards {
  A String
  B String

  @@unique([A, B], map: "_CalculateCardsToCards_AB_unique")
  @@index([B], map: "_CalculateCardsToCards_B_index")
  @@map("_CalculateCardsToCards")
}

enum BankName {
  Bss
  Khadmaty
}

enum UserRole {
  User
  Admin
}

enum TransactionTypes {
  Add
  Take
}

enum InvoiceStatusEnum {
  Waiting
  Rejected
  Accepted
}
